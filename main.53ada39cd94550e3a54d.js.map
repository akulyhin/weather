{"version":3,"sources":["webpack:///./js/refs.js","webpack:///./js/apiService.js","webpack:///./index.js"],"names":["searchCity","document","getElementById","weatherBox","querySelector","searchBtn","query","localStorage","getItem","apiKey","fetchWeather","url","fetch","response","json","roundTemp","temp","Math","round","refs","addEventListener","removeItem","setItem","value","location","href","apiService","then","data","console","log","main","feels","feels_like","innerHTML","name","weather","description","icon","render","alert"],"mappings":"4KAAe,GACXA,WAAYC,SAASC,eAAe,cACpCC,WAAYF,SAASG,cAAc,gBACnCC,UAAWJ,SAASG,cAAc,e,mICEpC,IAGa,GAEXE,MAAO,GALEC,aAAaC,QAAQ,QAM9BC,OAAQ,mCAgBFC,aAnBK,WAmBU,I,EAAA,c,EAAA,qIACbC,EADa,qDAC8C,EAAKL,MADnD,+BACuF,EAAKG,OAD5F,SAEMG,MAAMD,GAFZ,cAEXE,EAFW,yBAIVA,EAASC,QAJC,0C,mLCOzB,SAASC,EAAWC,GAChB,OAAOC,KAAKC,OAAOF,GA7BvBG,EAAKd,UAAUe,iBAAiB,SAAS,WACrCb,aAAac,WAAW,QACxBd,aAAae,QAAQ,OAAQH,EAAKnB,WAAWuB,OAC7CC,SAASC,KAAOD,SAASC,QAIvBlB,aAAaC,QAAQ,QAE3BkB,EAAWhB,eACViB,MAAK,SAAAC,GAASC,QAAQC,IAAIF,GAQ3B,SAAiBA,GACd,IAAMZ,EAAOD,EAAUa,EAAKG,KAAKf,MAC3BgB,EAAQjB,EAAUa,EAAKG,KAAKE,YACjCd,EAAKhB,WAAW+B,UAAhB,OAAmCN,EAAKO,KAAxC,8BACkBnB,EADlB,4BAEgBgB,EAFhB,iBAGKJ,EAAKQ,QAAQ,GAAGC,YAHrB,2DAIgDT,EAAKQ,QAAQ,GAAGE,KAJhE,sCAVAC,CAAOX,MAIPY,MAAM,kB","file":"main.53ada39cd94550e3a54d.js","sourcesContent":["export default {\r\n    searchCity: document.getElementById('searchCity'),\r\n    weatherBox: document.querySelector('.weather-box'),\r\n    searchBtn: document.querySelector('.searchBtn')\r\n}","import refs from './refs'\r\nimport debounce from 'lodash.debounce';\r\n\r\n\r\n\r\n  let city = localStorage.getItem(\"city\");\r\n\r\n\r\nexport default {\r\n\r\n    query: `${city}`,\r\n    apiKey: 'ff8084d11c7279450a985d59a31a6700',\r\n\r\n    \r\n    // geoLocation() {\r\n    //   const onGetPosition = location => {\r\n    //     console.log(location)\r\n    //     let latitude = location.coords.latitude;\r\n    //     let longitude = location.coords.longitude;\r\n    //     console.log(latitude);\r\n        \r\n    //     return latitude;\r\n    //   }\r\n    //   navigator.geolocation.getCurrentPosition(onGetPosition)\r\n    // },\r\n\r\n\r\n    async fetchWeather() {\r\n        let url = `https://api.openweathermap.org/data/2.5/weather?q=${this.query}&units=metric&lang=ru&appid=${this.apiKey}`;\r\n        const response = await fetch(url);\r\n        \r\n        return response.json();\r\n      }\r\n}","import './sass/styles.scss';\r\nimport apiService from './js/apiService';\r\nimport refs from './js/refs';\r\nimport debounce from 'lodash.debounce'\r\n\r\n\r\nrefs.searchBtn.addEventListener('click', () => {\r\n    localStorage.removeItem(\"city\");\r\n    localStorage.setItem(\"city\", refs.searchCity.value);\r\n    location.href = location.href;\r\n  });\r\n\r\n\r\n  if (localStorage.getItem('city')) {\r\n\r\napiService.fetchWeather()\r\n.then(data => {console.log(data),\r\n    render(data)\r\n})\r\n\r\n} else {\r\n    alert('Введите город')\r\n}\r\n\r\nfunction render (data) {\r\n   const temp = roundTemp(data.main.temp);\r\n   const feels = roundTemp(data.main.feels_like);\r\n    refs.weatherBox.innerHTML = `<h2>${data.name}</h2>\r\n    <p>Температура: ${temp}°</p>\r\n    <p>Ощущается: ${feels}°</p>\r\n    <p>${data.weather[0].description}</p>\r\n    <p><img src=\"https://openweathermap.org/img/w/${data.weather[0].icon}.png\" width=\"100\" height=\"100\"></p>`\r\n}\r\n\r\nfunction roundTemp (temp) {\r\n    return Math.round(+temp);\r\n}\r\n"],"sourceRoot":""}